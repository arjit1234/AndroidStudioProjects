package com.example.somya.savoir;import android.app.Activity;import android.app.ProgressDialog;import android.content.Intent;import android.graphics.Bitmap;import android.net.Uri;import android.support.annotation.NonNull;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.view.View;import android.widget.Button;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import com.google.android.gms.tasks.OnCompleteListener;import com.google.android.gms.tasks.Task;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.auth.FirebaseUser;import com.google.firebase.database.DataSnapshot;import com.google.firebase.database.DatabaseError;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import com.google.firebase.database.ValueEventListener;import com.google.firebase.storage.FirebaseStorage;import com.google.firebase.storage.StorageReference;import com.google.firebase.storage.UploadTask;import com.squareup.picasso.Picasso;import com.theartofdev.edmodo.cropper.CropImage;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.IOException;import java.util.HashMap;import java.util.Map;import java.util.Random;import de.hdodenhof.circleimageview.CircleImageView;import id.zelory.compressor.Compressor;public class AccountSetting extends AppCompatActivity {    //private FirebaseAuth mfirebaseAuth;    private DatabaseReference mUserDatabase;    private FirebaseUser mCurrentUser;    //layout    private TextView mName;    private TextView mStatus;    private CircleImageView mDisplayPicture;    private Button mStatusButton;    private Button mImageButton;    private static final int GALLERY_PICK = 1;    private StorageReference mImageStorage;    private ProgressDialog mProgressDialog;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_account_setting);        mStatusButton = (Button)findViewById(R.id.setting_StatusButton);        mImageButton = (Button)findViewById(R.id.setting_ImageButton);        mImageStorage = FirebaseStorage.getInstance().getReference();        mCurrentUser = FirebaseAuth.getInstance().getCurrentUser();        String uid = mCurrentUser.getUid();        mUserDatabase = FirebaseDatabase.getInstance().getReference().child("Users").child(uid);        mUserDatabase.addValueEventListener(new ValueEventListener() {            @Override            public void onDataChange(DataSnapshot dataSnapshot) {                String name = dataSnapshot.child("fullname").getValue().toString();                String status = dataSnapshot.child("status").getValue().toString();                String profilepic = dataSnapshot.child("profilepic").getValue().toString();                mStatus = (TextView)findViewById(R.id.setting_Status);                mName =(TextView)findViewById(R.id.setting_name);                mDisplayPicture = (CircleImageView)findViewById(R.id.setting_DisplayPicture);                mName.setText(name);                mStatus.setText(status);                if(!profilepic.equals("default")) {                    Picasso.with(AccountSetting.this).load(profilepic).placeholder(R.drawable.default_profile_pic).into(mDisplayPicture);                }                //Toast.makeText(AccountSetting.this, dataSnapshot.toString(), Toast.LENGTH_LONG).show();            }            @Override            public void onCancelled(DatabaseError databaseError) {            }        });        mStatusButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                Intent statusintent = new Intent(AccountSetting.this,ChangeStatus.class);                startActivity(statusintent);            }        });        mImageButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                Intent ImagePick = new Intent();                ImagePick.setType("image/*");                ImagePick.setAction(Intent.ACTION_GET_CONTENT);                startActivityForResult(Intent.createChooser(ImagePick, "SELECT IMAGE"),GALLERY_PICK);            }        });    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (requestCode == GALLERY_PICK && resultCode == RESULT_OK){            Uri imageUri = data.getData();            CropImage.activity(imageUri)                    .setAspectRatio(1,1)                    .start(this);        }        if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {            CropImage.ActivityResult result = CropImage.getActivityResult(data);            if (resultCode == RESULT_OK) {                mProgressDialog = new ProgressDialog(AccountSetting.this);                mProgressDialog.setTitle("Uploading Image");                mProgressDialog.setMessage("Please wait..");                mProgressDialog.setCanceledOnTouchOutside(false);                mProgressDialog.show();                Uri resultUri = result.getUri();                File thumb_filepath = new File(resultUri.getPath());                String cuid = mCurrentUser.getUid();                //Image Compression                Bitmap thumb_bitmap = null;                try {                    thumb_bitmap = new Compressor(this)                            .setMaxWidth(200)                            .setMaxHeight(200)                            .setQuality(30)                            .compressToBitmap(thumb_filepath);                }catch (IOException e) {                    e.printStackTrace();                }                ByteArrayOutputStream baos = new ByteArrayOutputStream();                thumb_bitmap.compress(Bitmap.CompressFormat.JPEG,100,baos);                final byte[] thumb_byte = baos.toByteArray();                StorageReference filepath = mImageStorage.child("profile_images").child(cuid+".jpg");                final StorageReference thumb_file = mImageStorage.child("profile_images").child("thumbs").child(cuid+".jpg");                filepath.putFile(resultUri).addOnCompleteListener(new OnCompleteListener<UploadTask.TaskSnapshot>() {                    @Override                    public void onComplete(@NonNull Task<UploadTask.TaskSnapshot> task) {                        if (task.isSuccessful()){                            final String pic_url = task.getResult().getDownloadUrl().toString();                            UploadTask uploadTask = thumb_file.putBytes(thumb_byte);                            uploadTask.addOnCompleteListener(new OnCompleteListener<UploadTask.TaskSnapshot>() {                                @Override                                public void onComplete(@NonNull Task<UploadTask.TaskSnapshot> thumb_task) {                                    String thumb_downloadUrl = thumb_task.getResult().getDownloadUrl().toString();                                    if(thumb_task.isSuccessful()){                                        Map update_hashMap = new HashMap();                                        update_hashMap.put("profilepic",pic_url);                                        update_hashMap.put("thumbpic",thumb_downloadUrl);                                        mUserDatabase.updateChildren(update_hashMap).addOnCompleteListener(new OnCompleteListener<Void>() {                                            @Override                                            public void onComplete(@NonNull Task<Void> task) {                                                if(task.isSuccessful()){                                                    mProgressDialog.dismiss();                                                    Toast.makeText(AccountSetting.this, "Upload Successfull",Toast.LENGTH_SHORT).show();                                                }                                            }                                        });                                    }                                }                            });                        }                        else {                            Toast.makeText(AccountSetting.this, "Not Working",Toast.LENGTH_SHORT).show();                            mProgressDialog.dismiss();                        }                    }                });            } else if (resultCode == CropImage.CROP_IMAGE_ACTIVITY_RESULT_ERROR_CODE) {                Exception error = result.getError();            }        }    }}